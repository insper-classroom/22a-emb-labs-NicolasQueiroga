
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001504  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20400000  00401504  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002c0  2040043c  00401940  0002043c  2**2
                  ALLOC
  3 .stack        00002004  204006fc  00401c00  0002043c  2**0
                  ALLOC
  4 .heap         00000200  20402700  00403c04  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015ee7  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000312b  00000000  00000000  000363aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004a07  00000000  00000000  000394d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000888  00000000  00000000  0003dedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000910  00000000  00000000  0003e764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008f09  00000000  00000000  0003f074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cfef  00000000  00000000  00047f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008facf  00000000  00000000  00054f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000013e8  00000000  00000000  000e4a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 27 40 20 2d 0f 40 00 29 0f 40 00 29 0f 40 00     .'@ -.@.).@.).@.
  400010:	29 0f 40 00 29 0f 40 00 29 0f 40 00 00 00 00 00     ).@.).@.).@.....
	...
  40002c:	29 0f 40 00 29 0f 40 00 00 00 00 00 29 0f 40 00     ).@.).@.....).@.
  40003c:	29 0f 40 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ).@.).@.).@.).@.
  40004c:	9d 12 40 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ..@.).@.).@.).@.
  40005c:	29 0f 40 00 29 0f 40 00 00 00 00 00 8d 0a 40 00     ).@.).@.......@.
  40006c:	a1 0a 40 00 b5 0a 40 00 29 0f 40 00 29 0f 40 00     ..@...@.).@.).@.
  40007c:	29 0f 40 00 c9 0a 40 00 dd 0a 40 00 29 0f 40 00     ).@...@...@.).@.
  40008c:	29 0f 40 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ).@.).@.).@.).@.
  40009c:	29 0f 40 00 71 12 40 00 29 0f 40 00 29 0f 40 00     ).@.q.@.).@.).@.
  4000ac:	29 0f 40 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ).@.).@.).@.).@.
  4000bc:	29 0f 40 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ).@.).@.).@.).@.
  4000cc:	29 0f 40 00 00 00 00 00 29 0f 40 00 00 00 00 00     ).@.....).@.....
  4000dc:	29 0f 40 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ).@.).@.).@.).@.
  4000ec:	29 0f 40 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ).@.).@.).@.).@.
  4000fc:	29 0f 40 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ).@.).@.).@.).@.
  40010c:	29 0f 40 00 29 0f 40 00 00 00 00 00 00 00 00 00     ).@.).@.........
  40011c:	00 00 00 00 29 0f 40 00 29 0f 40 00 29 0f 40 00     ....).@.).@.).@.
  40012c:	29 0f 40 00 29 0f 40 00 00 00 00 00 29 0f 40 00     ).@.).@.....).@.
  40013c:	29 0f 40 00                                         ).@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040043c 	.word	0x2040043c
  40015c:	00000000 	.word	0x00000000
  400160:	00401504 	.word	0x00401504

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00401504 	.word	0x00401504
  4001a0:	20400440 	.word	0x20400440
  4001a4:	00401504 	.word	0x00401504
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	20400458 	.word	0x20400458

004001c0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	20400458 	.word	0x20400458

004001ec <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4001ec:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <rtt_enable_interrupt+0x10>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	4319      	orrs	r1, r3
  4001f4:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4001f6:	6001      	str	r1, [r0, #0]
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	20400458 	.word	0x20400458

00400200 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400200:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400202:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <rtt_disable_interrupt+0x10>)
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40020c:	6001      	str	r1, [r0, #0]
  40020e:	4770      	bx	lr
  400210:	20400458 	.word	0x20400458

00400214 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400214:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400216:	6883      	ldr	r3, [r0, #8]
  400218:	429a      	cmp	r2, r3
  40021a:	d003      	beq.n	400224 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40021c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40021e:	6883      	ldr	r3, [r0, #8]
  400220:	4293      	cmp	r3, r2
  400222:	d1fb      	bne.n	40021c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400224:	4618      	mov	r0, r3
  400226:	4770      	bx	lr

00400228 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400228:	68c0      	ldr	r0, [r0, #12]
}
  40022a:	4770      	bx	lr

0040022c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40022c:	b570      	push	{r4, r5, r6, lr}
  40022e:	4606      	mov	r6, r0
  400230:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400232:	6804      	ldr	r4, [r0, #0]
  400234:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40023c:	4809      	ldr	r0, [pc, #36]	; (400264 <rtt_write_alarm_time+0x38>)
  40023e:	4b0a      	ldr	r3, [pc, #40]	; (400268 <rtt_write_alarm_time+0x3c>)
  400240:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400242:	b92d      	cbnz	r5, 400250 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400244:	f04f 33ff 	mov.w	r3, #4294967295
  400248:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40024a:	b924      	cbnz	r4, 400256 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  40024c:	2000      	movs	r0, #0
  40024e:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400250:	3d01      	subs	r5, #1
  400252:	6075      	str	r5, [r6, #4]
  400254:	e7f9      	b.n	40024a <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400256:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40025a:	4802      	ldr	r0, [pc, #8]	; (400264 <rtt_write_alarm_time+0x38>)
  40025c:	4b03      	ldr	r3, [pc, #12]	; (40026c <rtt_write_alarm_time+0x40>)
  40025e:	4798      	blx	r3
  400260:	e7f4      	b.n	40024c <rtt_write_alarm_time+0x20>
  400262:	bf00      	nop
  400264:	400e1830 	.word	0x400e1830
  400268:	00400201 	.word	0x00400201
  40026c:	004001ed 	.word	0x004001ed

00400270 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400270:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400272:	4b07      	ldr	r3, [pc, #28]	; (400290 <spi_enable_clock+0x20>)
  400274:	4298      	cmp	r0, r3
  400276:	d003      	beq.n	400280 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400278:	4b06      	ldr	r3, [pc, #24]	; (400294 <spi_enable_clock+0x24>)
  40027a:	4298      	cmp	r0, r3
  40027c:	d004      	beq.n	400288 <spi_enable_clock+0x18>
  40027e:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400280:	2015      	movs	r0, #21
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <spi_enable_clock+0x28>)
  400284:	4798      	blx	r3
  400286:	bd08      	pop	{r3, pc}
  400288:	202a      	movs	r0, #42	; 0x2a
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <spi_enable_clock+0x28>)
  40028c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40028e:	e7f6      	b.n	40027e <spi_enable_clock+0xe>
  400290:	40008000 	.word	0x40008000
  400294:	40058000 	.word	0x40058000
  400298:	00400c11 	.word	0x00400c11

0040029c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40029c:	6843      	ldr	r3, [r0, #4]
  40029e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4002a2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4002a4:	6843      	ldr	r3, [r0, #4]
  4002a6:	0409      	lsls	r1, r1, #16
  4002a8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4002ac:	4319      	orrs	r1, r3
  4002ae:	6041      	str	r1, [r0, #4]
  4002b0:	4770      	bx	lr

004002b2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4002b2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4002b4:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002b8:	6905      	ldr	r5, [r0, #16]
  4002ba:	f015 0f02 	tst.w	r5, #2
  4002be:	d103      	bne.n	4002c8 <spi_write+0x16>
		if (!timeout--) {
  4002c0:	3c01      	subs	r4, #1
  4002c2:	d1f9      	bne.n	4002b8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4002c4:	2001      	movs	r0, #1
  4002c6:	e00c      	b.n	4002e2 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002c8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002ca:	f014 0f02 	tst.w	r4, #2
  4002ce:	d006      	beq.n	4002de <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002d0:	0412      	lsls	r2, r2, #16
  4002d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002d6:	4311      	orrs	r1, r2
		if (uc_last) {
  4002d8:	b10b      	cbz	r3, 4002de <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002da:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002de:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bc30      	pop	{r4, r5}
  4002e4:	4770      	bx	lr

004002e6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002e6:	b932      	cbnz	r2, 4002f6 <spi_set_clock_polarity+0x10>
  4002e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ee:	f023 0301 	bic.w	r3, r3, #1
  4002f2:	6303      	str	r3, [r0, #48]	; 0x30
  4002f4:	4770      	bx	lr
  4002f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fc:	f043 0301 	orr.w	r3, r3, #1
  400300:	6303      	str	r3, [r0, #48]	; 0x30
  400302:	4770      	bx	lr

00400304 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400304:	b932      	cbnz	r2, 400314 <spi_set_clock_phase+0x10>
  400306:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40030a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40030c:	f023 0302 	bic.w	r3, r3, #2
  400310:	6303      	str	r3, [r0, #48]	; 0x30
  400312:	4770      	bx	lr
  400314:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400318:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40031a:	f043 0302 	orr.w	r3, r3, #2
  40031e:	6303      	str	r3, [r0, #48]	; 0x30
  400320:	4770      	bx	lr

00400322 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400322:	2a04      	cmp	r2, #4
  400324:	d003      	beq.n	40032e <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400326:	b16a      	cbz	r2, 400344 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400328:	2a08      	cmp	r2, #8
  40032a:	d016      	beq.n	40035a <spi_configure_cs_behavior+0x38>
  40032c:	4770      	bx	lr
  40032e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400332:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400334:	f023 0308 	bic.w	r3, r3, #8
  400338:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40033a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40033c:	f043 0304 	orr.w	r3, r3, #4
  400340:	6303      	str	r3, [r0, #48]	; 0x30
  400342:	4770      	bx	lr
  400344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400348:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40034a:	f023 0308 	bic.w	r3, r3, #8
  40034e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400350:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400352:	f023 0304 	bic.w	r3, r3, #4
  400356:	6303      	str	r3, [r0, #48]	; 0x30
  400358:	4770      	bx	lr
  40035a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40035e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400360:	f043 0308 	orr.w	r3, r3, #8
  400364:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400366:	e7e1      	b.n	40032c <spi_configure_cs_behavior+0xa>

00400368 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40036c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40036e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400372:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400374:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400376:	431a      	orrs	r2, r3
  400378:	630a      	str	r2, [r1, #48]	; 0x30
  40037a:	4770      	bx	lr

0040037c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40037c:	1e43      	subs	r3, r0, #1
  40037e:	4419      	add	r1, r3
  400380:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400384:	1e43      	subs	r3, r0, #1
  400386:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400388:	bf94      	ite	ls
  40038a:	b200      	sxthls	r0, r0
		return -1;
  40038c:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400390:	4770      	bx	lr

00400392 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  400392:	b17a      	cbz	r2, 4003b4 <spi_set_baudrate_div+0x22>
{
  400394:	b410      	push	{r4}
  400396:	4614      	mov	r4, r2
  400398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40039c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40039e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4003a2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4003a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4003a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003aa:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4003ac:	2000      	movs	r0, #0
}
  4003ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003b2:	4770      	bx	lr
        return -1;
  4003b4:	f04f 30ff 	mov.w	r0, #4294967295
  4003b8:	4770      	bx	lr

004003ba <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003ba:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4003be:	6a08      	ldr	r0, [r1, #32]
}
  4003c0:	4770      	bx	lr
	...

004003c4 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4003c4:	4b01      	ldr	r3, [pc, #4]	; (4003cc <gfx_mono_set_framebuffer+0x8>)
  4003c6:	6018      	str	r0, [r3, #0]
  4003c8:	4770      	bx	lr
  4003ca:	bf00      	nop
  4003cc:	2040045c 	.word	0x2040045c

004003d0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4003d0:	4b02      	ldr	r3, [pc, #8]	; (4003dc <gfx_mono_framebuffer_put_byte+0xc>)
  4003d2:	681b      	ldr	r3, [r3, #0]
  4003d4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4003d8:	5442      	strb	r2, [r0, r1]
  4003da:	4770      	bx	lr
  4003dc:	2040045c 	.word	0x2040045c

004003e0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4003e0:	4b02      	ldr	r3, [pc, #8]	; (4003ec <gfx_mono_framebuffer_get_byte+0xc>)
  4003e2:	681b      	ldr	r3, [r3, #0]
  4003e4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4003e8:	5c40      	ldrb	r0, [r0, r1]
  4003ea:	4770      	bx	lr
  4003ec:	2040045c 	.word	0x2040045c

004003f0 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4003f0:	b570      	push	{r4, r5, r6, lr}
  4003f2:	4604      	mov	r4, r0
  4003f4:	460d      	mov	r5, r1
  4003f6:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4003f8:	b91b      	cbnz	r3, 400402 <gfx_mono_ssd1306_put_byte+0x12>
  4003fa:	4b0d      	ldr	r3, [pc, #52]	; (400430 <gfx_mono_ssd1306_put_byte+0x40>)
  4003fc:	4798      	blx	r3
  4003fe:	42b0      	cmp	r0, r6
  400400:	d015      	beq.n	40042e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400402:	4632      	mov	r2, r6
  400404:	4629      	mov	r1, r5
  400406:	4620      	mov	r0, r4
  400408:	4b0a      	ldr	r3, [pc, #40]	; (400434 <gfx_mono_ssd1306_put_byte+0x44>)
  40040a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  40040c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400410:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400414:	4c08      	ldr	r4, [pc, #32]	; (400438 <gfx_mono_ssd1306_put_byte+0x48>)
  400416:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400418:	f3c5 1002 	ubfx	r0, r5, #4, #3
  40041c:	f040 0010 	orr.w	r0, r0, #16
  400420:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400422:	f005 000f 	and.w	r0, r5, #15
  400426:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400428:	4630      	mov	r0, r6
  40042a:	4b04      	ldr	r3, [pc, #16]	; (40043c <gfx_mono_ssd1306_put_byte+0x4c>)
  40042c:	4798      	blx	r3
  40042e:	bd70      	pop	{r4, r5, r6, pc}
  400430:	004003e1 	.word	0x004003e1
  400434:	004003d1 	.word	0x004003d1
  400438:	00400491 	.word	0x00400491
  40043c:	004006b1 	.word	0x004006b1

00400440 <gfx_mono_ssd1306_init>:
{
  400440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400444:	480d      	ldr	r0, [pc, #52]	; (40047c <gfx_mono_ssd1306_init+0x3c>)
  400446:	4b0e      	ldr	r3, [pc, #56]	; (400480 <gfx_mono_ssd1306_init+0x40>)
  400448:	4798      	blx	r3
	ssd1306_init();
  40044a:	4b0e      	ldr	r3, [pc, #56]	; (400484 <gfx_mono_ssd1306_init+0x44>)
  40044c:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40044e:	2040      	movs	r0, #64	; 0x40
  400450:	4b0d      	ldr	r3, [pc, #52]	; (400488 <gfx_mono_ssd1306_init+0x48>)
  400452:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400454:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400456:	f04f 0801 	mov.w	r8, #1
  40045a:	462f      	mov	r7, r5
  40045c:	4e0b      	ldr	r6, [pc, #44]	; (40048c <gfx_mono_ssd1306_init+0x4c>)
{
  40045e:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400460:	4643      	mov	r3, r8
  400462:	463a      	mov	r2, r7
  400464:	b2e1      	uxtb	r1, r4
  400466:	4628      	mov	r0, r5
  400468:	47b0      	blx	r6
  40046a:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  40046c:	2c80      	cmp	r4, #128	; 0x80
  40046e:	d1f7      	bne.n	400460 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400470:	3501      	adds	r5, #1
  400472:	b2ed      	uxtb	r5, r5
  400474:	2d04      	cmp	r5, #4
  400476:	d1f2      	bne.n	40045e <gfx_mono_ssd1306_init+0x1e>
  400478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40047c:	20400460 	.word	0x20400460
  400480:	004003c5 	.word	0x004003c5
  400484:	004004d1 	.word	0x004004d1
  400488:	00400491 	.word	0x00400491
  40048c:	004003f1 	.word	0x004003f1

00400490 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400490:	b538      	push	{r3, r4, r5, lr}
  400492:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400494:	2208      	movs	r2, #8
  400496:	4b09      	ldr	r3, [pc, #36]	; (4004bc <ssd1306_write_command+0x2c>)
  400498:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40049a:	4c09      	ldr	r4, [pc, #36]	; (4004c0 <ssd1306_write_command+0x30>)
  40049c:	2101      	movs	r1, #1
  40049e:	4620      	mov	r0, r4
  4004a0:	4b08      	ldr	r3, [pc, #32]	; (4004c4 <ssd1306_write_command+0x34>)
  4004a2:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4004a4:	2301      	movs	r3, #1
  4004a6:	461a      	mov	r2, r3
  4004a8:	4629      	mov	r1, r5
  4004aa:	4620      	mov	r0, r4
  4004ac:	4c06      	ldr	r4, [pc, #24]	; (4004c8 <ssd1306_write_command+0x38>)
  4004ae:	47a0      	blx	r4
	delay_us(10);
  4004b0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4004b4:	4b05      	ldr	r3, [pc, #20]	; (4004cc <ssd1306_write_command+0x3c>)
  4004b6:	4798      	blx	r3
  4004b8:	bd38      	pop	{r3, r4, r5, pc}
  4004ba:	bf00      	nop
  4004bc:	400e1000 	.word	0x400e1000
  4004c0:	40008000 	.word	0x40008000
  4004c4:	0040029d 	.word	0x0040029d
  4004c8:	004002b3 	.word	0x004002b3
  4004cc:	20400001 	.word	0x20400001

004004d0 <ssd1306_init>:
{
  4004d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004d4:	4d66      	ldr	r5, [pc, #408]	; (400670 <ssd1306_init+0x1a0>)
  4004d6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4004da:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004dc:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004e0:	4b64      	ldr	r3, [pc, #400]	; (400674 <ssd1306_init+0x1a4>)
  4004e2:	2708      	movs	r7, #8
  4004e4:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004e6:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4004ea:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4004ec:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004f0:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004f2:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004f4:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004f8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4004fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4004fe:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400500:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400502:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400506:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400508:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40050a:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40050e:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400510:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400512:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400518:	f022 0208 	bic.w	r2, r2, #8
  40051c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40051e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400520:	f022 0208 	bic.w	r2, r2, #8
  400524:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400526:	601f      	str	r7, [r3, #0]
  400528:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40052a:	631f      	str	r7, [r3, #48]	; 0x30
  40052c:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40052e:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4006ac <ssd1306_init+0x1dc>
  400532:	2300      	movs	r3, #0
  400534:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400538:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40053c:	4640      	mov	r0, r8
  40053e:	4c4e      	ldr	r4, [pc, #312]	; (400678 <ssd1306_init+0x1a8>)
  400540:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400542:	2300      	movs	r3, #0
  400544:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400548:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40054c:	4640      	mov	r0, r8
  40054e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400550:	2300      	movs	r3, #0
  400552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400556:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40055a:	4640      	mov	r0, r8
  40055c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40055e:	2300      	movs	r3, #0
  400560:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400564:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400568:	4640      	mov	r0, r8
  40056a:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40056c:	2300      	movs	r3, #0
  40056e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400572:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400576:	4640      	mov	r0, r8
  400578:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40057a:	2300      	movs	r3, #0
  40057c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400580:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400584:	4640      	mov	r0, r8
  400586:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400588:	4c3c      	ldr	r4, [pc, #240]	; (40067c <ssd1306_init+0x1ac>)
  40058a:	f04f 0902 	mov.w	r9, #2
  40058e:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400592:	f04f 0880 	mov.w	r8, #128	; 0x80
  400596:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40059a:	6863      	ldr	r3, [r4, #4]
  40059c:	f043 0301 	orr.w	r3, r3, #1
  4005a0:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4005a2:	463a      	mov	r2, r7
  4005a4:	2101      	movs	r1, #1
  4005a6:	4620      	mov	r0, r4
  4005a8:	4b35      	ldr	r3, [pc, #212]	; (400680 <ssd1306_init+0x1b0>)
  4005aa:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4005ac:	2200      	movs	r2, #0
  4005ae:	2101      	movs	r1, #1
  4005b0:	4620      	mov	r0, r4
  4005b2:	4b34      	ldr	r3, [pc, #208]	; (400684 <ssd1306_init+0x1b4>)
  4005b4:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4005b6:	2200      	movs	r2, #0
  4005b8:	2101      	movs	r1, #1
  4005ba:	4620      	mov	r0, r4
  4005bc:	4b32      	ldr	r3, [pc, #200]	; (400688 <ssd1306_init+0x1b8>)
  4005be:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4005c0:	6863      	ldr	r3, [r4, #4]
  4005c2:	f023 0302 	bic.w	r3, r3, #2
  4005c6:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  4005c8:	2200      	movs	r2, #0
  4005ca:	2101      	movs	r1, #1
  4005cc:	4620      	mov	r0, r4
  4005ce:	4b2f      	ldr	r3, [pc, #188]	; (40068c <ssd1306_init+0x1bc>)
  4005d0:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4005d2:	6863      	ldr	r3, [r4, #4]
  4005d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4005d8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4005da:	6863      	ldr	r3, [r4, #4]
  4005dc:	f043 0310 	orr.w	r3, r3, #16
  4005e0:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  4005e2:	492b      	ldr	r1, [pc, #172]	; (400690 <ssd1306_init+0x1c0>)
  4005e4:	482b      	ldr	r0, [pc, #172]	; (400694 <ssd1306_init+0x1c4>)
  4005e6:	4b2c      	ldr	r3, [pc, #176]	; (400698 <ssd1306_init+0x1c8>)
  4005e8:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  4005ea:	b2c2      	uxtb	r2, r0
  4005ec:	2101      	movs	r1, #1
  4005ee:	4620      	mov	r0, r4
  4005f0:	4b2a      	ldr	r3, [pc, #168]	; (40069c <ssd1306_init+0x1cc>)
  4005f2:	4798      	blx	r3
		spi_enable_clock(SPI0);
  4005f4:	4620      	mov	r0, r4
  4005f6:	4b2a      	ldr	r3, [pc, #168]	; (4006a0 <ssd1306_init+0x1d0>)
  4005f8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4005fa:	2301      	movs	r3, #1
  4005fc:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005fe:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400600:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400604:	4c27      	ldr	r4, [pc, #156]	; (4006a4 <ssd1306_init+0x1d4>)
  400606:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400608:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  40060a:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40060e:	47a0      	blx	r4
  400610:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400612:	20a8      	movs	r0, #168	; 0xa8
  400614:	4c24      	ldr	r4, [pc, #144]	; (4006a8 <ssd1306_init+0x1d8>)
  400616:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400618:	201f      	movs	r0, #31
  40061a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40061c:	20d3      	movs	r0, #211	; 0xd3
  40061e:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400620:	2000      	movs	r0, #0
  400622:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400624:	2040      	movs	r0, #64	; 0x40
  400626:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400628:	20a1      	movs	r0, #161	; 0xa1
  40062a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40062c:	20c8      	movs	r0, #200	; 0xc8
  40062e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400630:	20da      	movs	r0, #218	; 0xda
  400632:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400634:	4648      	mov	r0, r9
  400636:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400638:	2081      	movs	r0, #129	; 0x81
  40063a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  40063c:	208f      	movs	r0, #143	; 0x8f
  40063e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400640:	20a4      	movs	r0, #164	; 0xa4
  400642:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400644:	20a6      	movs	r0, #166	; 0xa6
  400646:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400648:	20d5      	movs	r0, #213	; 0xd5
  40064a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  40064c:	4640      	mov	r0, r8
  40064e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400650:	208d      	movs	r0, #141	; 0x8d
  400652:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400654:	2014      	movs	r0, #20
  400656:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400658:	20db      	movs	r0, #219	; 0xdb
  40065a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40065c:	2040      	movs	r0, #64	; 0x40
  40065e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400660:	20d9      	movs	r0, #217	; 0xd9
  400662:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400664:	20f1      	movs	r0, #241	; 0xf1
  400666:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400668:	20af      	movs	r0, #175	; 0xaf
  40066a:	47a0      	blx	r4
  40066c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400670:	400e1200 	.word	0x400e1200
  400674:	400e1000 	.word	0x400e1000
  400678:	00400999 	.word	0x00400999
  40067c:	40008000 	.word	0x40008000
  400680:	00400323 	.word	0x00400323
  400684:	004002e7 	.word	0x004002e7
  400688:	00400305 	.word	0x00400305
  40068c:	00400369 	.word	0x00400369
  400690:	08f0d180 	.word	0x08f0d180
  400694:	001e8480 	.word	0x001e8480
  400698:	0040037d 	.word	0x0040037d
  40069c:	00400393 	.word	0x00400393
  4006a0:	00400271 	.word	0x00400271
  4006a4:	20400001 	.word	0x20400001
  4006a8:	00400491 	.word	0x00400491
  4006ac:	400e1400 	.word	0x400e1400

004006b0 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  4006b0:	b538      	push	{r3, r4, r5, lr}
  4006b2:	4605      	mov	r5, r0
  4006b4:	2208      	movs	r2, #8
  4006b6:	4b09      	ldr	r3, [pc, #36]	; (4006dc <ssd1306_write_data+0x2c>)
  4006b8:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4006ba:	4c09      	ldr	r4, [pc, #36]	; (4006e0 <ssd1306_write_data+0x30>)
  4006bc:	2101      	movs	r1, #1
  4006be:	4620      	mov	r0, r4
  4006c0:	4b08      	ldr	r3, [pc, #32]	; (4006e4 <ssd1306_write_data+0x34>)
  4006c2:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  4006c4:	2301      	movs	r3, #1
  4006c6:	461a      	mov	r2, r3
  4006c8:	4629      	mov	r1, r5
  4006ca:	4620      	mov	r0, r4
  4006cc:	4c06      	ldr	r4, [pc, #24]	; (4006e8 <ssd1306_write_data+0x38>)
  4006ce:	47a0      	blx	r4
	delay_us(10);
  4006d0:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  4006d4:	4b05      	ldr	r3, [pc, #20]	; (4006ec <ssd1306_write_data+0x3c>)
  4006d6:	4798      	blx	r3
  4006d8:	bd38      	pop	{r3, r4, r5, pc}
  4006da:	bf00      	nop
  4006dc:	400e1000 	.word	0x400e1000
  4006e0:	40008000 	.word	0x40008000
  4006e4:	0040029d 	.word	0x0040029d
  4006e8:	004002b3 	.word	0x004002b3
  4006ec:	20400001 	.word	0x20400001

004006f0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4006f0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4006f2:	4810      	ldr	r0, [pc, #64]	; (400734 <sysclk_init+0x44>)
  4006f4:	4b10      	ldr	r3, [pc, #64]	; (400738 <sysclk_init+0x48>)
  4006f6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4006f8:	213e      	movs	r1, #62	; 0x3e
  4006fa:	2000      	movs	r0, #0
  4006fc:	4b0f      	ldr	r3, [pc, #60]	; (40073c <sysclk_init+0x4c>)
  4006fe:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400700:	4c0f      	ldr	r4, [pc, #60]	; (400740 <sysclk_init+0x50>)
  400702:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400704:	2800      	cmp	r0, #0
  400706:	d0fc      	beq.n	400702 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400708:	4b0e      	ldr	r3, [pc, #56]	; (400744 <sysclk_init+0x54>)
  40070a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40070c:	4a0e      	ldr	r2, [pc, #56]	; (400748 <sysclk_init+0x58>)
  40070e:	4b0f      	ldr	r3, [pc, #60]	; (40074c <sysclk_init+0x5c>)
  400710:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400712:	4c0f      	ldr	r4, [pc, #60]	; (400750 <sysclk_init+0x60>)
  400714:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400716:	2800      	cmp	r0, #0
  400718:	d0fc      	beq.n	400714 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40071a:	2002      	movs	r0, #2
  40071c:	4b0d      	ldr	r3, [pc, #52]	; (400754 <sysclk_init+0x64>)
  40071e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400720:	2000      	movs	r0, #0
  400722:	4b0d      	ldr	r3, [pc, #52]	; (400758 <sysclk_init+0x68>)
  400724:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400726:	4b0d      	ldr	r3, [pc, #52]	; (40075c <sysclk_init+0x6c>)
  400728:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40072a:	4802      	ldr	r0, [pc, #8]	; (400734 <sysclk_init+0x44>)
  40072c:	4b02      	ldr	r3, [pc, #8]	; (400738 <sysclk_init+0x48>)
  40072e:	4798      	blx	r3
  400730:	bd10      	pop	{r4, pc}
  400732:	bf00      	nop
  400734:	11e1a300 	.word	0x11e1a300
  400738:	00401101 	.word	0x00401101
  40073c:	00400b8d 	.word	0x00400b8d
  400740:	00400be1 	.word	0x00400be1
  400744:	00400bf1 	.word	0x00400bf1
  400748:	20183f01 	.word	0x20183f01
  40074c:	400e0600 	.word	0x400e0600
  400750:	00400c01 	.word	0x00400c01
  400754:	00400af1 	.word	0x00400af1
  400758:	00400b29 	.word	0x00400b29
  40075c:	00400ff5 	.word	0x00400ff5

00400760 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400762:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400766:	4b48      	ldr	r3, [pc, #288]	; (400888 <board_init+0x128>)
  400768:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40076a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40076e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400772:	4b46      	ldr	r3, [pc, #280]	; (40088c <board_init+0x12c>)
  400774:	2200      	movs	r2, #0
  400776:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40077a:	695a      	ldr	r2, [r3, #20]
  40077c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400780:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400782:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400786:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40078a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40078e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400792:	f007 0007 	and.w	r0, r7, #7
  400796:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400798:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40079c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4007a0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4007a4:	f3bf 8f4f 	dsb	sy
  4007a8:	f04f 34ff 	mov.w	r4, #4294967295
  4007ac:	fa04 fc00 	lsl.w	ip, r4, r0
  4007b0:	fa06 f000 	lsl.w	r0, r6, r0
  4007b4:	fa04 f40e 	lsl.w	r4, r4, lr
  4007b8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4007bc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4007be:	463a      	mov	r2, r7
  4007c0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4007c2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4007c6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4007ca:	3a01      	subs	r2, #1
  4007cc:	4423      	add	r3, r4
  4007ce:	f1b2 3fff 	cmp.w	r2, #4294967295
  4007d2:	d1f6      	bne.n	4007c2 <board_init+0x62>
        } while(sets--);
  4007d4:	3e01      	subs	r6, #1
  4007d6:	4460      	add	r0, ip
  4007d8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4007dc:	d1ef      	bne.n	4007be <board_init+0x5e>
  4007de:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4007e2:	4b2a      	ldr	r3, [pc, #168]	; (40088c <board_init+0x12c>)
  4007e4:	695a      	ldr	r2, [r3, #20]
  4007e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4007ea:	615a      	str	r2, [r3, #20]
  4007ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4007f0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4007f4:	4a26      	ldr	r2, [pc, #152]	; (400890 <board_init+0x130>)
  4007f6:	4927      	ldr	r1, [pc, #156]	; (400894 <board_init+0x134>)
  4007f8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4007fa:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4007fe:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400804:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400808:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40080c:	f022 0201 	bic.w	r2, r2, #1
  400810:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400814:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400818:	f022 0201 	bic.w	r2, r2, #1
  40081c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400824:	f3bf 8f6f 	isb	sy
  400828:	200a      	movs	r0, #10
  40082a:	4c1b      	ldr	r4, [pc, #108]	; (400898 <board_init+0x138>)
  40082c:	47a0      	blx	r4
  40082e:	200b      	movs	r0, #11
  400830:	47a0      	blx	r4
  400832:	200c      	movs	r0, #12
  400834:	47a0      	blx	r4
  400836:	2010      	movs	r0, #16
  400838:	47a0      	blx	r4
  40083a:	2011      	movs	r0, #17
  40083c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40083e:	4b17      	ldr	r3, [pc, #92]	; (40089c <board_init+0x13c>)
  400840:	f44f 7280 	mov.w	r2, #256	; 0x100
  400844:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400846:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40084a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40084c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400850:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400854:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400856:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40085a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40085c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400860:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400862:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400868:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40086a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40086e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400870:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400872:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400876:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400878:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40087c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400880:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400886:	bf00      	nop
  400888:	400e1850 	.word	0x400e1850
  40088c:	e000ed00 	.word	0xe000ed00
  400890:	400e0c00 	.word	0x400e0c00
  400894:	5a00080c 	.word	0x5a00080c
  400898:	00400c11 	.word	0x00400c11
  40089c:	400e1200 	.word	0x400e1200

004008a0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4008a0:	6301      	str	r1, [r0, #48]	; 0x30
  4008a2:	4770      	bx	lr

004008a4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4008a4:	6341      	str	r1, [r0, #52]	; 0x34
  4008a6:	4770      	bx	lr

004008a8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4008a8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4008aa:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4008ae:	d03a      	beq.n	400926 <pio_set_peripheral+0x7e>
  4008b0:	d813      	bhi.n	4008da <pio_set_peripheral+0x32>
  4008b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4008b6:	d025      	beq.n	400904 <pio_set_peripheral+0x5c>
  4008b8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4008bc:	d10a      	bne.n	4008d4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008be:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4008c0:	4313      	orrs	r3, r2
  4008c2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4008c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008c6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4008c8:	400b      	ands	r3, r1
  4008ca:	ea23 0302 	bic.w	r3, r3, r2
  4008ce:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4008d0:	6042      	str	r2, [r0, #4]
  4008d2:	4770      	bx	lr
	switch (ul_type) {
  4008d4:	2900      	cmp	r1, #0
  4008d6:	d1fb      	bne.n	4008d0 <pio_set_peripheral+0x28>
  4008d8:	4770      	bx	lr
  4008da:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4008de:	d021      	beq.n	400924 <pio_set_peripheral+0x7c>
  4008e0:	d809      	bhi.n	4008f6 <pio_set_peripheral+0x4e>
  4008e2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4008e6:	d1f3      	bne.n	4008d0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4008ea:	4313      	orrs	r3, r2
  4008ec:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008ee:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008f0:	4313      	orrs	r3, r2
  4008f2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008f4:	e7ec      	b.n	4008d0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4008f6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4008fa:	d013      	beq.n	400924 <pio_set_peripheral+0x7c>
  4008fc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400900:	d010      	beq.n	400924 <pio_set_peripheral+0x7c>
  400902:	e7e5      	b.n	4008d0 <pio_set_peripheral+0x28>
{
  400904:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400906:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400908:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40090a:	43d3      	mvns	r3, r2
  40090c:	4021      	ands	r1, r4
  40090e:	461c      	mov	r4, r3
  400910:	4019      	ands	r1, r3
  400912:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400914:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400916:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400918:	400b      	ands	r3, r1
  40091a:	4023      	ands	r3, r4
  40091c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40091e:	6042      	str	r2, [r0, #4]
}
  400920:	f85d 4b04 	ldr.w	r4, [sp], #4
  400924:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400926:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400928:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40092a:	400b      	ands	r3, r1
  40092c:	ea23 0302 	bic.w	r3, r3, r2
  400930:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400932:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400934:	4313      	orrs	r3, r2
  400936:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400938:	e7ca      	b.n	4008d0 <pio_set_peripheral+0x28>

0040093a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40093a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40093c:	f012 0f01 	tst.w	r2, #1
  400940:	d10d      	bne.n	40095e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400942:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400944:	f012 0f0a 	tst.w	r2, #10
  400948:	d00b      	beq.n	400962 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40094a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40094c:	f012 0f02 	tst.w	r2, #2
  400950:	d109      	bne.n	400966 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400952:	f012 0f08 	tst.w	r2, #8
  400956:	d008      	beq.n	40096a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400958:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40095c:	e005      	b.n	40096a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40095e:	6641      	str	r1, [r0, #100]	; 0x64
  400960:	e7f0      	b.n	400944 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400962:	6241      	str	r1, [r0, #36]	; 0x24
  400964:	e7f2      	b.n	40094c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400966:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40096a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40096c:	6001      	str	r1, [r0, #0]
  40096e:	4770      	bx	lr

00400970 <pio_set_output>:
{
  400970:	b410      	push	{r4}
  400972:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400974:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400976:	b94c      	cbnz	r4, 40098c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400978:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40097a:	b14b      	cbz	r3, 400990 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40097c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40097e:	b94a      	cbnz	r2, 400994 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400980:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400982:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400984:	6001      	str	r1, [r0, #0]
}
  400986:	f85d 4b04 	ldr.w	r4, [sp], #4
  40098a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40098c:	6641      	str	r1, [r0, #100]	; 0x64
  40098e:	e7f4      	b.n	40097a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400990:	6541      	str	r1, [r0, #84]	; 0x54
  400992:	e7f4      	b.n	40097e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400994:	6301      	str	r1, [r0, #48]	; 0x30
  400996:	e7f4      	b.n	400982 <pio_set_output+0x12>

00400998 <pio_configure>:
{
  400998:	b570      	push	{r4, r5, r6, lr}
  40099a:	b082      	sub	sp, #8
  40099c:	4605      	mov	r5, r0
  40099e:	4616      	mov	r6, r2
  4009a0:	461c      	mov	r4, r3
	switch (ul_type) {
  4009a2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4009a6:	d014      	beq.n	4009d2 <pio_configure+0x3a>
  4009a8:	d90a      	bls.n	4009c0 <pio_configure+0x28>
  4009aa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4009ae:	d024      	beq.n	4009fa <pio_configure+0x62>
  4009b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4009b4:	d021      	beq.n	4009fa <pio_configure+0x62>
  4009b6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4009ba:	d017      	beq.n	4009ec <pio_configure+0x54>
		return 0;
  4009bc:	2000      	movs	r0, #0
  4009be:	e01a      	b.n	4009f6 <pio_configure+0x5e>
	switch (ul_type) {
  4009c0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4009c4:	d005      	beq.n	4009d2 <pio_configure+0x3a>
  4009c6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4009ca:	d002      	beq.n	4009d2 <pio_configure+0x3a>
  4009cc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4009d0:	d1f4      	bne.n	4009bc <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4009d2:	4632      	mov	r2, r6
  4009d4:	4628      	mov	r0, r5
  4009d6:	4b11      	ldr	r3, [pc, #68]	; (400a1c <pio_configure+0x84>)
  4009d8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4009da:	f014 0f01 	tst.w	r4, #1
  4009de:	d102      	bne.n	4009e6 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4009e0:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4009e2:	2001      	movs	r0, #1
  4009e4:	e007      	b.n	4009f6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4009e6:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4009e8:	2001      	movs	r0, #1
  4009ea:	e004      	b.n	4009f6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4009ec:	461a      	mov	r2, r3
  4009ee:	4631      	mov	r1, r6
  4009f0:	4b0b      	ldr	r3, [pc, #44]	; (400a20 <pio_configure+0x88>)
  4009f2:	4798      	blx	r3
	return 1;
  4009f4:	2001      	movs	r0, #1
}
  4009f6:	b002      	add	sp, #8
  4009f8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4009fa:	f004 0301 	and.w	r3, r4, #1
  4009fe:	9300      	str	r3, [sp, #0]
  400a00:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400a04:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a08:	bf14      	ite	ne
  400a0a:	2200      	movne	r2, #0
  400a0c:	2201      	moveq	r2, #1
  400a0e:	4631      	mov	r1, r6
  400a10:	4628      	mov	r0, r5
  400a12:	4c04      	ldr	r4, [pc, #16]	; (400a24 <pio_configure+0x8c>)
  400a14:	47a0      	blx	r4
	return 1;
  400a16:	2001      	movs	r0, #1
		break;
  400a18:	e7ed      	b.n	4009f6 <pio_configure+0x5e>
  400a1a:	bf00      	nop
  400a1c:	004008a9 	.word	0x004008a9
  400a20:	0040093b 	.word	0x0040093b
  400a24:	00400971 	.word	0x00400971

00400a28 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400a28:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400a2a:	420b      	tst	r3, r1
}
  400a2c:	bf14      	ite	ne
  400a2e:	2001      	movne	r0, #1
  400a30:	2000      	moveq	r0, #0
  400a32:	4770      	bx	lr

00400a34 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400a34:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400a36:	4770      	bx	lr

00400a38 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400a38:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400a3a:	4770      	bx	lr

00400a3c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a40:	4604      	mov	r4, r0
  400a42:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a44:	4b0e      	ldr	r3, [pc, #56]	; (400a80 <pio_handler_process+0x44>)
  400a46:	4798      	blx	r3
  400a48:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a4a:	4620      	mov	r0, r4
  400a4c:	4b0d      	ldr	r3, [pc, #52]	; (400a84 <pio_handler_process+0x48>)
  400a4e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a50:	4005      	ands	r5, r0
  400a52:	d013      	beq.n	400a7c <pio_handler_process+0x40>
  400a54:	4c0c      	ldr	r4, [pc, #48]	; (400a88 <pio_handler_process+0x4c>)
  400a56:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400a5a:	e003      	b.n	400a64 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a5c:	42b4      	cmp	r4, r6
  400a5e:	d00d      	beq.n	400a7c <pio_handler_process+0x40>
  400a60:	3410      	adds	r4, #16
		while (status != 0) {
  400a62:	b15d      	cbz	r5, 400a7c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a64:	6820      	ldr	r0, [r4, #0]
  400a66:	4540      	cmp	r0, r8
  400a68:	d1f8      	bne.n	400a5c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a6a:	6861      	ldr	r1, [r4, #4]
  400a6c:	4229      	tst	r1, r5
  400a6e:	d0f5      	beq.n	400a5c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a70:	68e3      	ldr	r3, [r4, #12]
  400a72:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a74:	6863      	ldr	r3, [r4, #4]
  400a76:	ea25 0503 	bic.w	r5, r5, r3
  400a7a:	e7ef      	b.n	400a5c <pio_handler_process+0x20>
  400a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a80:	00400a35 	.word	0x00400a35
  400a84:	00400a39 	.word	0x00400a39
  400a88:	20400660 	.word	0x20400660

00400a8c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a8c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400a8e:	210a      	movs	r1, #10
  400a90:	4801      	ldr	r0, [pc, #4]	; (400a98 <PIOA_Handler+0xc>)
  400a92:	4b02      	ldr	r3, [pc, #8]	; (400a9c <PIOA_Handler+0x10>)
  400a94:	4798      	blx	r3
  400a96:	bd08      	pop	{r3, pc}
  400a98:	400e0e00 	.word	0x400e0e00
  400a9c:	00400a3d 	.word	0x00400a3d

00400aa0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400aa0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400aa2:	210b      	movs	r1, #11
  400aa4:	4801      	ldr	r0, [pc, #4]	; (400aac <PIOB_Handler+0xc>)
  400aa6:	4b02      	ldr	r3, [pc, #8]	; (400ab0 <PIOB_Handler+0x10>)
  400aa8:	4798      	blx	r3
  400aaa:	bd08      	pop	{r3, pc}
  400aac:	400e1000 	.word	0x400e1000
  400ab0:	00400a3d 	.word	0x00400a3d

00400ab4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400ab4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400ab6:	210c      	movs	r1, #12
  400ab8:	4801      	ldr	r0, [pc, #4]	; (400ac0 <PIOC_Handler+0xc>)
  400aba:	4b02      	ldr	r3, [pc, #8]	; (400ac4 <PIOC_Handler+0x10>)
  400abc:	4798      	blx	r3
  400abe:	bd08      	pop	{r3, pc}
  400ac0:	400e1200 	.word	0x400e1200
  400ac4:	00400a3d 	.word	0x00400a3d

00400ac8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ac8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400aca:	2110      	movs	r1, #16
  400acc:	4801      	ldr	r0, [pc, #4]	; (400ad4 <PIOD_Handler+0xc>)
  400ace:	4b02      	ldr	r3, [pc, #8]	; (400ad8 <PIOD_Handler+0x10>)
  400ad0:	4798      	blx	r3
  400ad2:	bd08      	pop	{r3, pc}
  400ad4:	400e1400 	.word	0x400e1400
  400ad8:	00400a3d 	.word	0x00400a3d

00400adc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400adc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400ade:	2111      	movs	r1, #17
  400ae0:	4801      	ldr	r0, [pc, #4]	; (400ae8 <PIOE_Handler+0xc>)
  400ae2:	4b02      	ldr	r3, [pc, #8]	; (400aec <PIOE_Handler+0x10>)
  400ae4:	4798      	blx	r3
  400ae6:	bd08      	pop	{r3, pc}
  400ae8:	400e1600 	.word	0x400e1600
  400aec:	00400a3d 	.word	0x00400a3d

00400af0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400af0:	2803      	cmp	r0, #3
  400af2:	d011      	beq.n	400b18 <pmc_mck_set_division+0x28>
  400af4:	2804      	cmp	r0, #4
  400af6:	d012      	beq.n	400b1e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400af8:	2802      	cmp	r0, #2
  400afa:	bf0c      	ite	eq
  400afc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b00:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b02:	4a08      	ldr	r2, [pc, #32]	; (400b24 <pmc_mck_set_division+0x34>)
  400b04:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b0a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b0c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b0e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b10:	f013 0f08 	tst.w	r3, #8
  400b14:	d0fb      	beq.n	400b0e <pmc_mck_set_division+0x1e>
}
  400b16:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b18:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b1c:	e7f1      	b.n	400b02 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b22:	e7ee      	b.n	400b02 <pmc_mck_set_division+0x12>
  400b24:	400e0600 	.word	0x400e0600

00400b28 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b28:	4a17      	ldr	r2, [pc, #92]	; (400b88 <pmc_switch_mck_to_pllack+0x60>)
  400b2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b30:	4318      	orrs	r0, r3
  400b32:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b34:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b36:	f013 0f08 	tst.w	r3, #8
  400b3a:	d10a      	bne.n	400b52 <pmc_switch_mck_to_pllack+0x2a>
  400b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b40:	4911      	ldr	r1, [pc, #68]	; (400b88 <pmc_switch_mck_to_pllack+0x60>)
  400b42:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b44:	f012 0f08 	tst.w	r2, #8
  400b48:	d103      	bne.n	400b52 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b4a:	3b01      	subs	r3, #1
  400b4c:	d1f9      	bne.n	400b42 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400b4e:	2001      	movs	r0, #1
  400b50:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b52:	4a0d      	ldr	r2, [pc, #52]	; (400b88 <pmc_switch_mck_to_pllack+0x60>)
  400b54:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b56:	f023 0303 	bic.w	r3, r3, #3
  400b5a:	f043 0302 	orr.w	r3, r3, #2
  400b5e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b62:	f013 0f08 	tst.w	r3, #8
  400b66:	d10a      	bne.n	400b7e <pmc_switch_mck_to_pllack+0x56>
  400b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b6c:	4906      	ldr	r1, [pc, #24]	; (400b88 <pmc_switch_mck_to_pllack+0x60>)
  400b6e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b70:	f012 0f08 	tst.w	r2, #8
  400b74:	d105      	bne.n	400b82 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b76:	3b01      	subs	r3, #1
  400b78:	d1f9      	bne.n	400b6e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400b7a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b7c:	4770      	bx	lr
	return 0;
  400b7e:	2000      	movs	r0, #0
  400b80:	4770      	bx	lr
  400b82:	2000      	movs	r0, #0
  400b84:	4770      	bx	lr
  400b86:	bf00      	nop
  400b88:	400e0600 	.word	0x400e0600

00400b8c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b8c:	b9a0      	cbnz	r0, 400bb8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b8e:	480e      	ldr	r0, [pc, #56]	; (400bc8 <pmc_switch_mainck_to_xtal+0x3c>)
  400b90:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400b92:	0209      	lsls	r1, r1, #8
  400b94:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b96:	4a0d      	ldr	r2, [pc, #52]	; (400bcc <pmc_switch_mainck_to_xtal+0x40>)
  400b98:	401a      	ands	r2, r3
  400b9a:	4b0d      	ldr	r3, [pc, #52]	; (400bd0 <pmc_switch_mainck_to_xtal+0x44>)
  400b9c:	4313      	orrs	r3, r2
  400b9e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400ba0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400ba2:	4602      	mov	r2, r0
  400ba4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ba6:	f013 0f01 	tst.w	r3, #1
  400baa:	d0fb      	beq.n	400ba4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400bac:	4a06      	ldr	r2, [pc, #24]	; (400bc8 <pmc_switch_mainck_to_xtal+0x3c>)
  400bae:	6a11      	ldr	r1, [r2, #32]
  400bb0:	4b08      	ldr	r3, [pc, #32]	; (400bd4 <pmc_switch_mainck_to_xtal+0x48>)
  400bb2:	430b      	orrs	r3, r1
  400bb4:	6213      	str	r3, [r2, #32]
  400bb6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bb8:	4903      	ldr	r1, [pc, #12]	; (400bc8 <pmc_switch_mainck_to_xtal+0x3c>)
  400bba:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400bbc:	4a06      	ldr	r2, [pc, #24]	; (400bd8 <pmc_switch_mainck_to_xtal+0x4c>)
  400bbe:	401a      	ands	r2, r3
  400bc0:	4b06      	ldr	r3, [pc, #24]	; (400bdc <pmc_switch_mainck_to_xtal+0x50>)
  400bc2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bc4:	620b      	str	r3, [r1, #32]
  400bc6:	4770      	bx	lr
  400bc8:	400e0600 	.word	0x400e0600
  400bcc:	ffc8fffc 	.word	0xffc8fffc
  400bd0:	00370001 	.word	0x00370001
  400bd4:	01370000 	.word	0x01370000
  400bd8:	fec8fffc 	.word	0xfec8fffc
  400bdc:	01370002 	.word	0x01370002

00400be0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400be0:	4b02      	ldr	r3, [pc, #8]	; (400bec <pmc_osc_is_ready_mainck+0xc>)
  400be2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400be4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400be8:	4770      	bx	lr
  400bea:	bf00      	nop
  400bec:	400e0600 	.word	0x400e0600

00400bf0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400bf0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400bf4:	4b01      	ldr	r3, [pc, #4]	; (400bfc <pmc_disable_pllack+0xc>)
  400bf6:	629a      	str	r2, [r3, #40]	; 0x28
  400bf8:	4770      	bx	lr
  400bfa:	bf00      	nop
  400bfc:	400e0600 	.word	0x400e0600

00400c00 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c00:	4b02      	ldr	r3, [pc, #8]	; (400c0c <pmc_is_locked_pllack+0xc>)
  400c02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c04:	f000 0002 	and.w	r0, r0, #2
  400c08:	4770      	bx	lr
  400c0a:	bf00      	nop
  400c0c:	400e0600 	.word	0x400e0600

00400c10 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c10:	283f      	cmp	r0, #63	; 0x3f
  400c12:	d81e      	bhi.n	400c52 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c14:	281f      	cmp	r0, #31
  400c16:	d80c      	bhi.n	400c32 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c18:	4b11      	ldr	r3, [pc, #68]	; (400c60 <pmc_enable_periph_clk+0x50>)
  400c1a:	699a      	ldr	r2, [r3, #24]
  400c1c:	2301      	movs	r3, #1
  400c1e:	4083      	lsls	r3, r0
  400c20:	4393      	bics	r3, r2
  400c22:	d018      	beq.n	400c56 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c24:	2301      	movs	r3, #1
  400c26:	fa03 f000 	lsl.w	r0, r3, r0
  400c2a:	4b0d      	ldr	r3, [pc, #52]	; (400c60 <pmc_enable_periph_clk+0x50>)
  400c2c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c2e:	2000      	movs	r0, #0
  400c30:	4770      	bx	lr
		ul_id -= 32;
  400c32:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c34:	4b0a      	ldr	r3, [pc, #40]	; (400c60 <pmc_enable_periph_clk+0x50>)
  400c36:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c3a:	2301      	movs	r3, #1
  400c3c:	4083      	lsls	r3, r0
  400c3e:	4393      	bics	r3, r2
  400c40:	d00b      	beq.n	400c5a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c42:	2301      	movs	r3, #1
  400c44:	fa03 f000 	lsl.w	r0, r3, r0
  400c48:	4b05      	ldr	r3, [pc, #20]	; (400c60 <pmc_enable_periph_clk+0x50>)
  400c4a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400c4e:	2000      	movs	r0, #0
  400c50:	4770      	bx	lr
		return 1;
  400c52:	2001      	movs	r0, #1
  400c54:	4770      	bx	lr
	return 0;
  400c56:	2000      	movs	r0, #0
  400c58:	4770      	bx	lr
  400c5a:	2000      	movs	r0, #0
}
  400c5c:	4770      	bx	lr
  400c5e:	bf00      	nop
  400c60:	400e0600 	.word	0x400e0600

00400c64 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  400c64:	4770      	bx	lr
	...

00400c68 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400c68:	4a10      	ldr	r2, [pc, #64]	; (400cac <pmc_enable_waitmode+0x44>)
  400c6a:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400c6c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  400c74:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  400c76:	6a11      	ldr	r1, [r2, #32]
  400c78:	4b0d      	ldr	r3, [pc, #52]	; (400cb0 <pmc_enable_waitmode+0x48>)
  400c7a:	430b      	orrs	r3, r1
  400c7c:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400c7e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c80:	f013 0f08 	tst.w	r3, #8
  400c84:	d0fb      	beq.n	400c7e <pmc_enable_waitmode+0x16>
  400c86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  400c8a:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  400c8c:	3b01      	subs	r3, #1
  400c8e:	d1fc      	bne.n	400c8a <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  400c90:	4a06      	ldr	r2, [pc, #24]	; (400cac <pmc_enable_waitmode+0x44>)
  400c92:	6a13      	ldr	r3, [r2, #32]
  400c94:	f013 0f08 	tst.w	r3, #8
  400c98:	d0fb      	beq.n	400c92 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  400c9a:	4a04      	ldr	r2, [pc, #16]	; (400cac <pmc_enable_waitmode+0x44>)
  400c9c:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400c9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400ca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  400ca6:	6713      	str	r3, [r2, #112]	; 0x70
  400ca8:	4770      	bx	lr
  400caa:	bf00      	nop
  400cac:	400e0600 	.word	0x400e0600
  400cb0:	00370004 	.word	0x00370004

00400cb4 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  400cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  400cb8:	1e43      	subs	r3, r0, #1
  400cba:	2b04      	cmp	r3, #4
  400cbc:	f200 8107 	bhi.w	400ece <pmc_sleep+0x21a>
  400cc0:	e8df f013 	tbh	[pc, r3, lsl #1]
  400cc4:	00050005 	.word	0x00050005
  400cc8:	00150015 	.word	0x00150015
  400ccc:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  400cce:	4a81      	ldr	r2, [pc, #516]	; (400ed4 <pmc_sleep+0x220>)
  400cd0:	6913      	ldr	r3, [r2, #16]
  400cd2:	f023 0304 	bic.w	r3, r3, #4
  400cd6:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400cd8:	2201      	movs	r2, #1
  400cda:	4b7f      	ldr	r3, [pc, #508]	; (400ed8 <pmc_sleep+0x224>)
  400cdc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400cde:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400ce2:	b662      	cpsie	i
  __ASM volatile ("dsb");
  400ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  400ce8:	bf30      	wfi
  400cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400cee:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400cf0:	2803      	cmp	r0, #3
  400cf2:	bf0c      	ite	eq
  400cf4:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400cf6:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400cfa:	4b78      	ldr	r3, [pc, #480]	; (400edc <pmc_sleep+0x228>)
  400cfc:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400cfe:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400d00:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400d04:	2200      	movs	r2, #0
  400d06:	4b74      	ldr	r3, [pc, #464]	; (400ed8 <pmc_sleep+0x224>)
  400d08:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400d0a:	2201      	movs	r2, #1
  400d0c:	4b74      	ldr	r3, [pc, #464]	; (400ee0 <pmc_sleep+0x22c>)
  400d0e:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400d10:	4b74      	ldr	r3, [pc, #464]	; (400ee4 <pmc_sleep+0x230>)
  400d12:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  400d14:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  400d16:	4a74      	ldr	r2, [pc, #464]	; (400ee8 <pmc_sleep+0x234>)
  400d18:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400d1c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400d1e:	4a73      	ldr	r2, [pc, #460]	; (400eec <pmc_sleep+0x238>)
  400d20:	433a      	orrs	r2, r7
  400d22:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400d24:	f005 0903 	and.w	r9, r5, #3
  400d28:	f1b9 0f01 	cmp.w	r9, #1
  400d2c:	f240 8089 	bls.w	400e42 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400d30:	f025 0103 	bic.w	r1, r5, #3
  400d34:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400d38:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d3a:	461a      	mov	r2, r3
  400d3c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d3e:	f013 0f08 	tst.w	r3, #8
  400d42:	d0fb      	beq.n	400d3c <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  400d44:	f011 0f70 	tst.w	r1, #112	; 0x70
  400d48:	d008      	beq.n	400d5c <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400d4a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400d4e:	4b65      	ldr	r3, [pc, #404]	; (400ee4 <pmc_sleep+0x230>)
  400d50:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400d52:	461a      	mov	r2, r3
  400d54:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d56:	f013 0f08 	tst.w	r3, #8
  400d5a:	d0fb      	beq.n	400d54 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  400d5c:	4b64      	ldr	r3, [pc, #400]	; (400ef0 <pmc_sleep+0x23c>)
  400d5e:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400d60:	4a60      	ldr	r2, [pc, #384]	; (400ee4 <pmc_sleep+0x230>)
  400d62:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400d68:	d0fb      	beq.n	400d62 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400d6a:	4a5e      	ldr	r2, [pc, #376]	; (400ee4 <pmc_sleep+0x230>)
  400d6c:	6a11      	ldr	r1, [r2, #32]
  400d6e:	4b61      	ldr	r3, [pc, #388]	; (400ef4 <pmc_sleep+0x240>)
  400d70:	400b      	ands	r3, r1
  400d72:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400d76:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400d78:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d7a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400d7e:	d0fb      	beq.n	400d78 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  400d80:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  400d84:	4a58      	ldr	r2, [pc, #352]	; (400ee8 <pmc_sleep+0x234>)
  400d86:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  400d88:	2c04      	cmp	r4, #4
  400d8a:	d05c      	beq.n	400e46 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  400d8c:	4c52      	ldr	r4, [pc, #328]	; (400ed8 <pmc_sleep+0x224>)
  400d8e:	2301      	movs	r3, #1
  400d90:	7023      	strb	r3, [r4, #0]
  400d92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d96:	b662      	cpsie	i

		pmc_enable_waitmode();
  400d98:	4b57      	ldr	r3, [pc, #348]	; (400ef8 <pmc_sleep+0x244>)
  400d9a:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  400d9c:	b672      	cpsid	i
  400d9e:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  400da2:	2300      	movs	r3, #0
  400da4:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  400da6:	f017 0f02 	tst.w	r7, #2
  400daa:	d055      	beq.n	400e58 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400dac:	4a4d      	ldr	r2, [pc, #308]	; (400ee4 <pmc_sleep+0x230>)
  400dae:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400db0:	4952      	ldr	r1, [pc, #328]	; (400efc <pmc_sleep+0x248>)
  400db2:	4019      	ands	r1, r3
  400db4:	4b52      	ldr	r3, [pc, #328]	; (400f00 <pmc_sleep+0x24c>)
  400db6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400db8:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400dba:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  400dbc:	4b51      	ldr	r3, [pc, #324]	; (400f04 <pmc_sleep+0x250>)
  400dbe:	400b      	ands	r3, r1
  400dc0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400dc4:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  400dc6:	4b50      	ldr	r3, [pc, #320]	; (400f08 <pmc_sleep+0x254>)
  400dc8:	4033      	ands	r3, r6
  400dca:	2b00      	cmp	r3, #0
  400dcc:	d06e      	beq.n	400eac <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  400dce:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400dd2:	4b44      	ldr	r3, [pc, #272]	; (400ee4 <pmc_sleep+0x230>)
  400dd4:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  400dd6:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400dd8:	f1b9 0f02 	cmp.w	r9, #2
  400ddc:	d104      	bne.n	400de8 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400dde:	4a41      	ldr	r2, [pc, #260]	; (400ee4 <pmc_sleep+0x230>)
  400de0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400de2:	f013 0f02 	tst.w	r3, #2
  400de6:	d0fb      	beq.n	400de0 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  400de8:	4a3e      	ldr	r2, [pc, #248]	; (400ee4 <pmc_sleep+0x230>)
  400dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400df0:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400df4:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400df6:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400df8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dfa:	f013 0f08 	tst.w	r3, #8
  400dfe:	d0fb      	beq.n	400df8 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  400e00:	4b39      	ldr	r3, [pc, #228]	; (400ee8 <pmc_sleep+0x234>)
  400e02:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  400e06:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400e0a:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e0c:	461a      	mov	r2, r3
  400e0e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e10:	f013 0f08 	tst.w	r3, #8
  400e14:	d0fb      	beq.n	400e0e <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  400e16:	4a33      	ldr	r2, [pc, #204]	; (400ee4 <pmc_sleep+0x230>)
  400e18:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e1a:	420b      	tst	r3, r1
  400e1c:	d0fc      	beq.n	400e18 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400e1e:	2200      	movs	r2, #0
  400e20:	4b2f      	ldr	r3, [pc, #188]	; (400ee0 <pmc_sleep+0x22c>)
  400e22:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400e24:	4b39      	ldr	r3, [pc, #228]	; (400f0c <pmc_sleep+0x258>)
  400e26:	681b      	ldr	r3, [r3, #0]
  400e28:	b11b      	cbz	r3, 400e32 <pmc_sleep+0x17e>
			callback_clocks_restored();
  400e2a:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400e2c:	2200      	movs	r2, #0
  400e2e:	4b37      	ldr	r3, [pc, #220]	; (400f0c <pmc_sleep+0x258>)
  400e30:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400e32:	2201      	movs	r2, #1
  400e34:	4b28      	ldr	r3, [pc, #160]	; (400ed8 <pmc_sleep+0x224>)
  400e36:	701a      	strb	r2, [r3, #0]
  400e38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e3c:	b662      	cpsie	i
  400e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  400e42:	4629      	mov	r1, r5
  400e44:	e77e      	b.n	400d44 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e46:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  400e4a:	6a11      	ldr	r1, [r2, #32]
  400e4c:	4b30      	ldr	r3, [pc, #192]	; (400f10 <pmc_sleep+0x25c>)
  400e4e:	400b      	ands	r3, r1
  400e50:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e54:	6213      	str	r3, [r2, #32]
  400e56:	e799      	b.n	400d8c <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400e58:	f017 0f01 	tst.w	r7, #1
  400e5c:	d0b3      	beq.n	400dc6 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400e5e:	4b21      	ldr	r3, [pc, #132]	; (400ee4 <pmc_sleep+0x230>)
  400e60:	6a1b      	ldr	r3, [r3, #32]
  400e62:	f013 0f01 	tst.w	r3, #1
  400e66:	d10b      	bne.n	400e80 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e68:	491e      	ldr	r1, [pc, #120]	; (400ee4 <pmc_sleep+0x230>)
  400e6a:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400e6c:	4a29      	ldr	r2, [pc, #164]	; (400f14 <pmc_sleep+0x260>)
  400e6e:	401a      	ands	r2, r3
  400e70:	4b29      	ldr	r3, [pc, #164]	; (400f18 <pmc_sleep+0x264>)
  400e72:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e74:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e76:	460a      	mov	r2, r1
  400e78:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e7a:	f013 0f01 	tst.w	r3, #1
  400e7e:	d0fb      	beq.n	400e78 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400e80:	4b18      	ldr	r3, [pc, #96]	; (400ee4 <pmc_sleep+0x230>)
  400e82:	6a1b      	ldr	r3, [r3, #32]
  400e84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e88:	d108      	bne.n	400e9c <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e8a:	4a16      	ldr	r2, [pc, #88]	; (400ee4 <pmc_sleep+0x230>)
  400e8c:	6a11      	ldr	r1, [r2, #32]
  400e8e:	4b23      	ldr	r3, [pc, #140]	; (400f1c <pmc_sleep+0x268>)
  400e90:	430b      	orrs	r3, r1
  400e92:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400e94:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400e9a:	d0fb      	beq.n	400e94 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400e9c:	4a11      	ldr	r2, [pc, #68]	; (400ee4 <pmc_sleep+0x230>)
  400e9e:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  400ea0:	4b18      	ldr	r3, [pc, #96]	; (400f04 <pmc_sleep+0x250>)
  400ea2:	400b      	ands	r3, r1
  400ea4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400ea8:	6213      	str	r3, [r2, #32]
  400eaa:	e78c      	b.n	400dc6 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  400eac:	2100      	movs	r1, #0
  400eae:	e793      	b.n	400dd8 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  400eb0:	4a08      	ldr	r2, [pc, #32]	; (400ed4 <pmc_sleep+0x220>)
  400eb2:	6913      	ldr	r3, [r2, #16]
  400eb4:	f043 0304 	orr.w	r3, r3, #4
  400eb8:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  400eba:	4a19      	ldr	r2, [pc, #100]	; (400f20 <pmc_sleep+0x26c>)
  400ebc:	4b19      	ldr	r3, [pc, #100]	; (400f24 <pmc_sleep+0x270>)
  400ebe:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  400ec0:	2201      	movs	r2, #1
  400ec2:	4b05      	ldr	r3, [pc, #20]	; (400ed8 <pmc_sleep+0x224>)
  400ec4:	701a      	strb	r2, [r3, #0]
  400ec6:	f3bf 8f5f 	dmb	sy
  400eca:	b662      	cpsie	i
  __ASM volatile ("wfi");
  400ecc:	bf30      	wfi
  400ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ed2:	bf00      	nop
  400ed4:	e000ed00 	.word	0xe000ed00
  400ed8:	2040000a 	.word	0x2040000a
  400edc:	00400c65 	.word	0x00400c65
  400ee0:	204006d0 	.word	0x204006d0
  400ee4:	400e0600 	.word	0x400e0600
  400ee8:	400e0c00 	.word	0x400e0c00
  400eec:	00370008 	.word	0x00370008
  400ef0:	00400bf1 	.word	0x00400bf1
  400ef4:	fec8ffff 	.word	0xfec8ffff
  400ef8:	00400c69 	.word	0x00400c69
  400efc:	fec8fffc 	.word	0xfec8fffc
  400f00:	01370002 	.word	0x01370002
  400f04:	ffc8ff87 	.word	0xffc8ff87
  400f08:	07ff0000 	.word	0x07ff0000
  400f0c:	204006d4 	.word	0x204006d4
  400f10:	ffc8fffe 	.word	0xffc8fffe
  400f14:	ffc8fffc 	.word	0xffc8fffc
  400f18:	00370001 	.word	0x00370001
  400f1c:	01370000 	.word	0x01370000
  400f20:	a5000004 	.word	0xa5000004
  400f24:	400e1810 	.word	0x400e1810

00400f28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400f28:	e7fe      	b.n	400f28 <Dummy_Handler>
	...

00400f2c <Reset_Handler>:
{
  400f2c:	b500      	push	{lr}
  400f2e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400f30:	4b25      	ldr	r3, [pc, #148]	; (400fc8 <Reset_Handler+0x9c>)
  400f32:	4a26      	ldr	r2, [pc, #152]	; (400fcc <Reset_Handler+0xa0>)
  400f34:	429a      	cmp	r2, r3
  400f36:	d010      	beq.n	400f5a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400f38:	4b25      	ldr	r3, [pc, #148]	; (400fd0 <Reset_Handler+0xa4>)
  400f3a:	4a23      	ldr	r2, [pc, #140]	; (400fc8 <Reset_Handler+0x9c>)
  400f3c:	429a      	cmp	r2, r3
  400f3e:	d20c      	bcs.n	400f5a <Reset_Handler+0x2e>
  400f40:	3b01      	subs	r3, #1
  400f42:	1a9b      	subs	r3, r3, r2
  400f44:	f023 0303 	bic.w	r3, r3, #3
  400f48:	3304      	adds	r3, #4
  400f4a:	4413      	add	r3, r2
  400f4c:	491f      	ldr	r1, [pc, #124]	; (400fcc <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400f4e:	f851 0b04 	ldr.w	r0, [r1], #4
  400f52:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400f56:	429a      	cmp	r2, r3
  400f58:	d1f9      	bne.n	400f4e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400f5a:	4b1e      	ldr	r3, [pc, #120]	; (400fd4 <Reset_Handler+0xa8>)
  400f5c:	4a1e      	ldr	r2, [pc, #120]	; (400fd8 <Reset_Handler+0xac>)
  400f5e:	429a      	cmp	r2, r3
  400f60:	d20a      	bcs.n	400f78 <Reset_Handler+0x4c>
  400f62:	3b01      	subs	r3, #1
  400f64:	1a9b      	subs	r3, r3, r2
  400f66:	f023 0303 	bic.w	r3, r3, #3
  400f6a:	3304      	adds	r3, #4
  400f6c:	4413      	add	r3, r2
                *pDest++ = 0;
  400f6e:	2100      	movs	r1, #0
  400f70:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400f74:	4293      	cmp	r3, r2
  400f76:	d1fb      	bne.n	400f70 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400f78:	4a18      	ldr	r2, [pc, #96]	; (400fdc <Reset_Handler+0xb0>)
  400f7a:	4b19      	ldr	r3, [pc, #100]	; (400fe0 <Reset_Handler+0xb4>)
  400f7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400f80:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400f82:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400f86:	fab3 f383 	clz	r3, r3
  400f8a:	095b      	lsrs	r3, r3, #5
  400f8c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400f8e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400f90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400f94:	2200      	movs	r2, #0
  400f96:	4b13      	ldr	r3, [pc, #76]	; (400fe4 <Reset_Handler+0xb8>)
  400f98:	701a      	strb	r2, [r3, #0]
	return flags;
  400f9a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400f9c:	4a12      	ldr	r2, [pc, #72]	; (400fe8 <Reset_Handler+0xbc>)
  400f9e:	6813      	ldr	r3, [r2, #0]
  400fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400fa4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400fa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400faa:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400fae:	b129      	cbz	r1, 400fbc <Reset_Handler+0x90>
		cpu_irq_enable();
  400fb0:	2201      	movs	r2, #1
  400fb2:	4b0c      	ldr	r3, [pc, #48]	; (400fe4 <Reset_Handler+0xb8>)
  400fb4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400fb6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400fba:	b662      	cpsie	i
        __libc_init_array();
  400fbc:	4b0b      	ldr	r3, [pc, #44]	; (400fec <Reset_Handler+0xc0>)
  400fbe:	4798      	blx	r3
        main();
  400fc0:	4b0b      	ldr	r3, [pc, #44]	; (400ff0 <Reset_Handler+0xc4>)
  400fc2:	4798      	blx	r3
  400fc4:	e7fe      	b.n	400fc4 <Reset_Handler+0x98>
  400fc6:	bf00      	nop
  400fc8:	20400000 	.word	0x20400000
  400fcc:	00401504 	.word	0x00401504
  400fd0:	2040043c 	.word	0x2040043c
  400fd4:	204006fc 	.word	0x204006fc
  400fd8:	2040043c 	.word	0x2040043c
  400fdc:	e000ed00 	.word	0xe000ed00
  400fe0:	00400000 	.word	0x00400000
  400fe4:	2040000a 	.word	0x2040000a
  400fe8:	e000ed88 	.word	0xe000ed88
  400fec:	0040136d 	.word	0x0040136d
  400ff0:	00401355 	.word	0x00401355

00400ff4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400ff4:	4b3b      	ldr	r3, [pc, #236]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  400ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ff8:	f003 0303 	and.w	r3, r3, #3
  400ffc:	2b01      	cmp	r3, #1
  400ffe:	d01d      	beq.n	40103c <SystemCoreClockUpdate+0x48>
  401000:	b183      	cbz	r3, 401024 <SystemCoreClockUpdate+0x30>
  401002:	2b02      	cmp	r3, #2
  401004:	d036      	beq.n	401074 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401006:	4b37      	ldr	r3, [pc, #220]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  401008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40100a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40100e:	2b70      	cmp	r3, #112	; 0x70
  401010:	d05f      	beq.n	4010d2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401012:	4b34      	ldr	r3, [pc, #208]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  401014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401016:	4934      	ldr	r1, [pc, #208]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  401018:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40101c:	680b      	ldr	r3, [r1, #0]
  40101e:	40d3      	lsrs	r3, r2
  401020:	600b      	str	r3, [r1, #0]
  401022:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401024:	4b31      	ldr	r3, [pc, #196]	; (4010ec <SystemCoreClockUpdate+0xf8>)
  401026:	695b      	ldr	r3, [r3, #20]
  401028:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40102c:	bf14      	ite	ne
  40102e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401032:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401036:	4b2c      	ldr	r3, [pc, #176]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  401038:	601a      	str	r2, [r3, #0]
  40103a:	e7e4      	b.n	401006 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40103c:	4b29      	ldr	r3, [pc, #164]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  40103e:	6a1b      	ldr	r3, [r3, #32]
  401040:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401044:	d003      	beq.n	40104e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401046:	4a2a      	ldr	r2, [pc, #168]	; (4010f0 <SystemCoreClockUpdate+0xfc>)
  401048:	4b27      	ldr	r3, [pc, #156]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  40104a:	601a      	str	r2, [r3, #0]
  40104c:	e7db      	b.n	401006 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40104e:	4a29      	ldr	r2, [pc, #164]	; (4010f4 <SystemCoreClockUpdate+0x100>)
  401050:	4b25      	ldr	r3, [pc, #148]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  401052:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401054:	4b23      	ldr	r3, [pc, #140]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  401056:	6a1b      	ldr	r3, [r3, #32]
  401058:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40105c:	2b10      	cmp	r3, #16
  40105e:	d005      	beq.n	40106c <SystemCoreClockUpdate+0x78>
  401060:	2b20      	cmp	r3, #32
  401062:	d1d0      	bne.n	401006 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401064:	4a22      	ldr	r2, [pc, #136]	; (4010f0 <SystemCoreClockUpdate+0xfc>)
  401066:	4b20      	ldr	r3, [pc, #128]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  401068:	601a      	str	r2, [r3, #0]
          break;
  40106a:	e7cc      	b.n	401006 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40106c:	4a22      	ldr	r2, [pc, #136]	; (4010f8 <SystemCoreClockUpdate+0x104>)
  40106e:	4b1e      	ldr	r3, [pc, #120]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  401070:	601a      	str	r2, [r3, #0]
          break;
  401072:	e7c8      	b.n	401006 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401074:	4b1b      	ldr	r3, [pc, #108]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  401076:	6a1b      	ldr	r3, [r3, #32]
  401078:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40107c:	d016      	beq.n	4010ac <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40107e:	4a1c      	ldr	r2, [pc, #112]	; (4010f0 <SystemCoreClockUpdate+0xfc>)
  401080:	4b19      	ldr	r3, [pc, #100]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  401082:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401084:	4b17      	ldr	r3, [pc, #92]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  401086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401088:	f003 0303 	and.w	r3, r3, #3
  40108c:	2b02      	cmp	r3, #2
  40108e:	d1ba      	bne.n	401006 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401090:	4a14      	ldr	r2, [pc, #80]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  401092:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401094:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401096:	4814      	ldr	r0, [pc, #80]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401098:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40109c:	6803      	ldr	r3, [r0, #0]
  40109e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4010a2:	b2d2      	uxtb	r2, r2
  4010a4:	fbb3 f3f2 	udiv	r3, r3, r2
  4010a8:	6003      	str	r3, [r0, #0]
  4010aa:	e7ac      	b.n	401006 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4010ac:	4a11      	ldr	r2, [pc, #68]	; (4010f4 <SystemCoreClockUpdate+0x100>)
  4010ae:	4b0e      	ldr	r3, [pc, #56]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  4010b0:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4010b2:	4b0c      	ldr	r3, [pc, #48]	; (4010e4 <SystemCoreClockUpdate+0xf0>)
  4010b4:	6a1b      	ldr	r3, [r3, #32]
  4010b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010ba:	2b10      	cmp	r3, #16
  4010bc:	d005      	beq.n	4010ca <SystemCoreClockUpdate+0xd6>
  4010be:	2b20      	cmp	r3, #32
  4010c0:	d1e0      	bne.n	401084 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4010c2:	4a0b      	ldr	r2, [pc, #44]	; (4010f0 <SystemCoreClockUpdate+0xfc>)
  4010c4:	4b08      	ldr	r3, [pc, #32]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  4010c6:	601a      	str	r2, [r3, #0]
          break;
  4010c8:	e7dc      	b.n	401084 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4010ca:	4a0b      	ldr	r2, [pc, #44]	; (4010f8 <SystemCoreClockUpdate+0x104>)
  4010cc:	4b06      	ldr	r3, [pc, #24]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  4010ce:	601a      	str	r2, [r3, #0]
          break;
  4010d0:	e7d8      	b.n	401084 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4010d2:	4a05      	ldr	r2, [pc, #20]	; (4010e8 <SystemCoreClockUpdate+0xf4>)
  4010d4:	6813      	ldr	r3, [r2, #0]
  4010d6:	4909      	ldr	r1, [pc, #36]	; (4010fc <SystemCoreClockUpdate+0x108>)
  4010d8:	fba1 1303 	umull	r1, r3, r1, r3
  4010dc:	085b      	lsrs	r3, r3, #1
  4010de:	6013      	str	r3, [r2, #0]
  4010e0:	4770      	bx	lr
  4010e2:	bf00      	nop
  4010e4:	400e0600 	.word	0x400e0600
  4010e8:	2040000c 	.word	0x2040000c
  4010ec:	400e1810 	.word	0x400e1810
  4010f0:	00b71b00 	.word	0x00b71b00
  4010f4:	003d0900 	.word	0x003d0900
  4010f8:	007a1200 	.word	0x007a1200
  4010fc:	aaaaaaab 	.word	0xaaaaaaab

00401100 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401100:	4b16      	ldr	r3, [pc, #88]	; (40115c <system_init_flash+0x5c>)
  401102:	4298      	cmp	r0, r3
  401104:	d913      	bls.n	40112e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401106:	4b16      	ldr	r3, [pc, #88]	; (401160 <system_init_flash+0x60>)
  401108:	4298      	cmp	r0, r3
  40110a:	d915      	bls.n	401138 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40110c:	4b15      	ldr	r3, [pc, #84]	; (401164 <system_init_flash+0x64>)
  40110e:	4298      	cmp	r0, r3
  401110:	d916      	bls.n	401140 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401112:	4b15      	ldr	r3, [pc, #84]	; (401168 <system_init_flash+0x68>)
  401114:	4298      	cmp	r0, r3
  401116:	d917      	bls.n	401148 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401118:	4b14      	ldr	r3, [pc, #80]	; (40116c <system_init_flash+0x6c>)
  40111a:	4298      	cmp	r0, r3
  40111c:	d918      	bls.n	401150 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40111e:	4b14      	ldr	r3, [pc, #80]	; (401170 <system_init_flash+0x70>)
  401120:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401122:	bf94      	ite	ls
  401124:	4a13      	ldrls	r2, [pc, #76]	; (401174 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401126:	4a14      	ldrhi	r2, [pc, #80]	; (401178 <system_init_flash+0x78>)
  401128:	4b14      	ldr	r3, [pc, #80]	; (40117c <system_init_flash+0x7c>)
  40112a:	601a      	str	r2, [r3, #0]
  40112c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40112e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401132:	4b12      	ldr	r3, [pc, #72]	; (40117c <system_init_flash+0x7c>)
  401134:	601a      	str	r2, [r3, #0]
  401136:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401138:	4a11      	ldr	r2, [pc, #68]	; (401180 <system_init_flash+0x80>)
  40113a:	4b10      	ldr	r3, [pc, #64]	; (40117c <system_init_flash+0x7c>)
  40113c:	601a      	str	r2, [r3, #0]
  40113e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401140:	4a10      	ldr	r2, [pc, #64]	; (401184 <system_init_flash+0x84>)
  401142:	4b0e      	ldr	r3, [pc, #56]	; (40117c <system_init_flash+0x7c>)
  401144:	601a      	str	r2, [r3, #0]
  401146:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401148:	4a0f      	ldr	r2, [pc, #60]	; (401188 <system_init_flash+0x88>)
  40114a:	4b0c      	ldr	r3, [pc, #48]	; (40117c <system_init_flash+0x7c>)
  40114c:	601a      	str	r2, [r3, #0]
  40114e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401150:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401154:	4b09      	ldr	r3, [pc, #36]	; (40117c <system_init_flash+0x7c>)
  401156:	601a      	str	r2, [r3, #0]
  401158:	4770      	bx	lr
  40115a:	bf00      	nop
  40115c:	015ef3bf 	.word	0x015ef3bf
  401160:	02bde77f 	.word	0x02bde77f
  401164:	041cdb3f 	.word	0x041cdb3f
  401168:	057bceff 	.word	0x057bceff
  40116c:	06dac2bf 	.word	0x06dac2bf
  401170:	0839b67f 	.word	0x0839b67f
  401174:	04000500 	.word	0x04000500
  401178:	04000600 	.word	0x04000600
  40117c:	400e0c00 	.word	0x400e0c00
  401180:	04000100 	.word	0x04000100
  401184:	04000200 	.word	0x04000200
  401188:	04000300 	.word	0x04000300

0040118c <RTT_init>:
		pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK); // BLINK Led
	}
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource)
{
  40118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401190:	ed2d 8b02 	vpush	{d8}
  401194:	b082      	sub	sp, #8
  401196:	eeb0 8a40 	vmov.f32	s16, s0
  40119a:	4680      	mov	r8, r0
  40119c:	460f      	mov	r7, r1
	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);

	rtt_sel_source(RTT, false);
  40119e:	4c20      	ldr	r4, [pc, #128]	; (401220 <RTT_init+0x94>)
  4011a0:	2100      	movs	r1, #0
  4011a2:	4620      	mov	r0, r4
  4011a4:	4b1f      	ldr	r3, [pc, #124]	; (401224 <RTT_init+0x98>)
  4011a6:	4798      	blx	r3
	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);
  4011a8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 401228 <RTT_init+0x9c>
  4011ac:	eec7 7a08 	vdiv.f32	s15, s14, s16
  4011b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4011b4:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  4011b8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  4011bc:	4620      	mov	r0, r4
  4011be:	4b1b      	ldr	r3, [pc, #108]	; (40122c <RTT_init+0xa0>)
  4011c0:	4798      	blx	r3

	if (rttIRQSource & RTT_MR_ALMIEN)
  4011c2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  4011c6:	d116      	bne.n	4011f6 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4011c8:	4b19      	ldr	r3, [pc, #100]	; (401230 <RTT_init+0xa4>)
  4011ca:	2208      	movs	r2, #8
  4011cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4011d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4011d4:	2180      	movs	r1, #128	; 0x80
  4011d6:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4011da:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(RTT_IRQn);
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  4011dc:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  4011e0:	d119      	bne.n	401216 <RTT_init+0x8a>
		rtt_enable_interrupt(RTT, rttIRQSource);
	else
		rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  4011e2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  4011e6:	480e      	ldr	r0, [pc, #56]	; (401220 <RTT_init+0x94>)
  4011e8:	4b12      	ldr	r3, [pc, #72]	; (401234 <RTT_init+0xa8>)
  4011ea:	4798      	blx	r3
}
  4011ec:	b002      	add	sp, #8
  4011ee:	ecbd 8b02 	vpop	{d8}
  4011f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  4011f6:	4620      	mov	r0, r4
  4011f8:	4b0f      	ldr	r3, [pc, #60]	; (401238 <RTT_init+0xac>)
  4011fa:	4798      	blx	r3
  4011fc:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT))
  4011fe:	4e08      	ldr	r6, [pc, #32]	; (401220 <RTT_init+0x94>)
  401200:	4d0d      	ldr	r5, [pc, #52]	; (401238 <RTT_init+0xac>)
  401202:	4630      	mov	r0, r6
  401204:	47a8      	blx	r5
  401206:	4284      	cmp	r4, r0
  401208:	d0fb      	beq.n	401202 <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses + ul_previous_time);
  40120a:	eb04 0108 	add.w	r1, r4, r8
  40120e:	4804      	ldr	r0, [pc, #16]	; (401220 <RTT_init+0x94>)
  401210:	4b0a      	ldr	r3, [pc, #40]	; (40123c <RTT_init+0xb0>)
  401212:	4798      	blx	r3
  401214:	e7d8      	b.n	4011c8 <RTT_init+0x3c>
		rtt_enable_interrupt(RTT, rttIRQSource);
  401216:	4639      	mov	r1, r7
  401218:	4801      	ldr	r0, [pc, #4]	; (401220 <RTT_init+0x94>)
  40121a:	4b09      	ldr	r3, [pc, #36]	; (401240 <RTT_init+0xb4>)
  40121c:	4798      	blx	r3
  40121e:	e7e5      	b.n	4011ec <RTT_init+0x60>
  401220:	400e1830 	.word	0x400e1830
  401224:	004001c1 	.word	0x004001c1
  401228:	47000000 	.word	0x47000000
  40122c:	004001ad 	.word	0x004001ad
  401230:	e000e100 	.word	0xe000e100
  401234:	00400201 	.word	0x00400201
  401238:	00400215 	.word	0x00400215
  40123c:	0040022d 	.word	0x0040022d
  401240:	004001ed 	.word	0x004001ed

00401244 <pin_toggle>:
{
  401244:	b538      	push	{r3, r4, r5, lr}
  401246:	4604      	mov	r4, r0
  401248:	460d      	mov	r5, r1
	if (pio_get_output_data_status(pio, mask))
  40124a:	4b06      	ldr	r3, [pc, #24]	; (401264 <pin_toggle+0x20>)
  40124c:	4798      	blx	r3
  40124e:	b920      	cbnz	r0, 40125a <pin_toggle+0x16>
		pio_set(pio, mask);
  401250:	4629      	mov	r1, r5
  401252:	4620      	mov	r0, r4
  401254:	4b04      	ldr	r3, [pc, #16]	; (401268 <pin_toggle+0x24>)
  401256:	4798      	blx	r3
  401258:	bd38      	pop	{r3, r4, r5, pc}
		pio_clear(pio, mask);
  40125a:	4629      	mov	r1, r5
  40125c:	4620      	mov	r0, r4
  40125e:	4b03      	ldr	r3, [pc, #12]	; (40126c <pin_toggle+0x28>)
  401260:	4798      	blx	r3
  401262:	bd38      	pop	{r3, r4, r5, pc}
  401264:	00400a29 	.word	0x00400a29
  401268:	004008a1 	.word	0x004008a1
  40126c:	004008a5 	.word	0x004008a5

00401270 <TC1_Handler>:
{
  401270:	b500      	push	{lr}
  401272:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401274:	2101      	movs	r1, #1
  401276:	4805      	ldr	r0, [pc, #20]	; (40128c <TC1_Handler+0x1c>)
  401278:	4b05      	ldr	r3, [pc, #20]	; (401290 <TC1_Handler+0x20>)
  40127a:	4798      	blx	r3
  40127c:	9001      	str	r0, [sp, #4]
	pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  40127e:	2101      	movs	r1, #1
  401280:	4804      	ldr	r0, [pc, #16]	; (401294 <TC1_Handler+0x24>)
  401282:	4b05      	ldr	r3, [pc, #20]	; (401298 <TC1_Handler+0x28>)
  401284:	4798      	blx	r3
}
  401286:	b003      	add	sp, #12
  401288:	f85d fb04 	ldr.w	pc, [sp], #4
  40128c:	4000c000 	.word	0x4000c000
  401290:	004003bb 	.word	0x004003bb
  401294:	400e0e00 	.word	0x400e0e00
  401298:	00401245 	.word	0x00401245

0040129c <RTT_Handler>:
{
  40129c:	b510      	push	{r4, lr}
	ul_status = rtt_get_status(RTT);
  40129e:	480c      	ldr	r0, [pc, #48]	; (4012d0 <RTT_Handler+0x34>)
  4012a0:	4b0c      	ldr	r3, [pc, #48]	; (4012d4 <RTT_Handler+0x38>)
  4012a2:	4798      	blx	r3
  4012a4:	4604      	mov	r4, r0
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS)
  4012a6:	f010 0f01 	tst.w	r0, #1
  4012aa:	d103      	bne.n	4012b4 <RTT_Handler+0x18>
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC)
  4012ac:	f014 0f02 	tst.w	r4, #2
  4012b0:	d108      	bne.n	4012c4 <RTT_Handler+0x28>
  4012b2:	bd10      	pop	{r4, pc}
		RTT_init(4, 0, RTT_MR_RTTINCIEN);
  4012b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4012b8:	2000      	movs	r0, #0
  4012ba:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  4012be:	4b06      	ldr	r3, [pc, #24]	; (4012d8 <RTT_Handler+0x3c>)
  4012c0:	4798      	blx	r3
  4012c2:	e7f3      	b.n	4012ac <RTT_Handler+0x10>
		pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK); // BLINK Led
  4012c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4012c8:	4804      	ldr	r0, [pc, #16]	; (4012dc <RTT_Handler+0x40>)
  4012ca:	4b05      	ldr	r3, [pc, #20]	; (4012e0 <RTT_Handler+0x44>)
  4012cc:	4798      	blx	r3
}
  4012ce:	e7f0      	b.n	4012b2 <RTT_Handler+0x16>
  4012d0:	400e1830 	.word	0x400e1830
  4012d4:	00400229 	.word	0x00400229
  4012d8:	0040118d 	.word	0x0040118d
  4012dc:	400e1200 	.word	0x400e1200
  4012e0:	00401245 	.word	0x00401245

004012e4 <init>:

void init(void)
{
  4012e4:	b538      	push	{r3, r4, r5, lr}
	// setup
	board_init();
  4012e6:	4b12      	ldr	r3, [pc, #72]	; (401330 <init+0x4c>)
  4012e8:	4798      	blx	r3
	sysclk_init();
  4012ea:	4b12      	ldr	r3, [pc, #72]	; (401334 <init+0x50>)
  4012ec:	4798      	blx	r3
	delay_init();
	gfx_mono_ssd1306_init();
  4012ee:	4b12      	ldr	r3, [pc, #72]	; (401338 <init+0x54>)
  4012f0:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  4012f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4012f6:	4b11      	ldr	r3, [pc, #68]	; (40133c <init+0x58>)
  4012f8:	605a      	str	r2, [r3, #4]

	pmc_enable_periph_clk(LED1_PIO_ID);
  4012fa:	200a      	movs	r0, #10
  4012fc:	4d10      	ldr	r5, [pc, #64]	; (401340 <init+0x5c>)
  4012fe:	47a8      	blx	r5
	pio_configure(LED1_PIO, PIO_OUTPUT_1, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  401300:	2300      	movs	r3, #0
  401302:	2201      	movs	r2, #1
  401304:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401308:	480e      	ldr	r0, [pc, #56]	; (401344 <init+0x60>)
  40130a:	4c0f      	ldr	r4, [pc, #60]	; (401348 <init+0x64>)
  40130c:	47a0      	blx	r4

	pmc_enable_periph_clk(LED2_PIO_ID);
  40130e:	200c      	movs	r0, #12
  401310:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_1, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  401312:	2300      	movs	r3, #0
  401314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401318:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40131c:	480b      	ldr	r0, [pc, #44]	; (40134c <init+0x68>)
  40131e:	47a0      	blx	r4
	// TC
	// TC_init(TC0, ID_TC1, 1, 4);
	// tc_start(TC0, 1);

	// RTT
	RTT_init(4, 16, RTT_MR_ALMIEN);
  401320:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401324:	2010      	movs	r0, #16
  401326:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  40132a:	4b09      	ldr	r3, [pc, #36]	; (401350 <init+0x6c>)
  40132c:	4798      	blx	r3
  40132e:	bd38      	pop	{r3, r4, r5, pc}
  401330:	00400761 	.word	0x00400761
  401334:	004006f1 	.word	0x004006f1
  401338:	00400441 	.word	0x00400441
  40133c:	400e1850 	.word	0x400e1850
  401340:	00400c11 	.word	0x00400c11
  401344:	400e0e00 	.word	0x400e0e00
  401348:	00400999 	.word	0x00400999
  40134c:	400e1200 	.word	0x400e1200
  401350:	0040118d 	.word	0x0040118d

00401354 <main>:
}

int main(void)
{
  401354:	b508      	push	{r3, lr}
	init();
  401356:	4b03      	ldr	r3, [pc, #12]	; (401364 <main+0x10>)
  401358:	4798      	blx	r3
	while (1)
	{
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  40135a:	2502      	movs	r5, #2
  40135c:	4c02      	ldr	r4, [pc, #8]	; (401368 <main+0x14>)
  40135e:	4628      	mov	r0, r5
  401360:	47a0      	blx	r4
  401362:	e7fc      	b.n	40135e <main+0xa>
  401364:	004012e5 	.word	0x004012e5
  401368:	00400cb5 	.word	0x00400cb5

0040136c <__libc_init_array>:
  40136c:	b570      	push	{r4, r5, r6, lr}
  40136e:	4e0f      	ldr	r6, [pc, #60]	; (4013ac <__libc_init_array+0x40>)
  401370:	4d0f      	ldr	r5, [pc, #60]	; (4013b0 <__libc_init_array+0x44>)
  401372:	1b76      	subs	r6, r6, r5
  401374:	10b6      	asrs	r6, r6, #2
  401376:	bf18      	it	ne
  401378:	2400      	movne	r4, #0
  40137a:	d005      	beq.n	401388 <__libc_init_array+0x1c>
  40137c:	3401      	adds	r4, #1
  40137e:	f855 3b04 	ldr.w	r3, [r5], #4
  401382:	4798      	blx	r3
  401384:	42a6      	cmp	r6, r4
  401386:	d1f9      	bne.n	40137c <__libc_init_array+0x10>
  401388:	4e0a      	ldr	r6, [pc, #40]	; (4013b4 <__libc_init_array+0x48>)
  40138a:	4d0b      	ldr	r5, [pc, #44]	; (4013b8 <__libc_init_array+0x4c>)
  40138c:	1b76      	subs	r6, r6, r5
  40138e:	f000 f8a7 	bl	4014e0 <_init>
  401392:	10b6      	asrs	r6, r6, #2
  401394:	bf18      	it	ne
  401396:	2400      	movne	r4, #0
  401398:	d006      	beq.n	4013a8 <__libc_init_array+0x3c>
  40139a:	3401      	adds	r4, #1
  40139c:	f855 3b04 	ldr.w	r3, [r5], #4
  4013a0:	4798      	blx	r3
  4013a2:	42a6      	cmp	r6, r4
  4013a4:	d1f9      	bne.n	40139a <__libc_init_array+0x2e>
  4013a6:	bd70      	pop	{r4, r5, r6, pc}
  4013a8:	bd70      	pop	{r4, r5, r6, pc}
  4013aa:	bf00      	nop
  4013ac:	004014ec 	.word	0x004014ec
  4013b0:	004014ec 	.word	0x004014ec
  4013b4:	004014f4 	.word	0x004014f4
  4013b8:	004014ec 	.word	0x004014ec

004013bc <register_fini>:
  4013bc:	4b02      	ldr	r3, [pc, #8]	; (4013c8 <register_fini+0xc>)
  4013be:	b113      	cbz	r3, 4013c6 <register_fini+0xa>
  4013c0:	4802      	ldr	r0, [pc, #8]	; (4013cc <register_fini+0x10>)
  4013c2:	f000 b805 	b.w	4013d0 <atexit>
  4013c6:	4770      	bx	lr
  4013c8:	00000000 	.word	0x00000000
  4013cc:	004013dd 	.word	0x004013dd

004013d0 <atexit>:
  4013d0:	2300      	movs	r3, #0
  4013d2:	4601      	mov	r1, r0
  4013d4:	461a      	mov	r2, r3
  4013d6:	4618      	mov	r0, r3
  4013d8:	f000 b81e 	b.w	401418 <__register_exitproc>

004013dc <__libc_fini_array>:
  4013dc:	b538      	push	{r3, r4, r5, lr}
  4013de:	4c0a      	ldr	r4, [pc, #40]	; (401408 <__libc_fini_array+0x2c>)
  4013e0:	4d0a      	ldr	r5, [pc, #40]	; (40140c <__libc_fini_array+0x30>)
  4013e2:	1b64      	subs	r4, r4, r5
  4013e4:	10a4      	asrs	r4, r4, #2
  4013e6:	d00a      	beq.n	4013fe <__libc_fini_array+0x22>
  4013e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4013ec:	3b01      	subs	r3, #1
  4013ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4013f2:	3c01      	subs	r4, #1
  4013f4:	f855 3904 	ldr.w	r3, [r5], #-4
  4013f8:	4798      	blx	r3
  4013fa:	2c00      	cmp	r4, #0
  4013fc:	d1f9      	bne.n	4013f2 <__libc_fini_array+0x16>
  4013fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401402:	f000 b877 	b.w	4014f4 <_fini>
  401406:	bf00      	nop
  401408:	00401504 	.word	0x00401504
  40140c:	00401500 	.word	0x00401500

00401410 <__retarget_lock_acquire_recursive>:
  401410:	4770      	bx	lr
  401412:	bf00      	nop

00401414 <__retarget_lock_release_recursive>:
  401414:	4770      	bx	lr
  401416:	bf00      	nop

00401418 <__register_exitproc>:
  401418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40141c:	4d2c      	ldr	r5, [pc, #176]	; (4014d0 <__register_exitproc+0xb8>)
  40141e:	4606      	mov	r6, r0
  401420:	6828      	ldr	r0, [r5, #0]
  401422:	4698      	mov	r8, r3
  401424:	460f      	mov	r7, r1
  401426:	4691      	mov	r9, r2
  401428:	f7ff fff2 	bl	401410 <__retarget_lock_acquire_recursive>
  40142c:	4b29      	ldr	r3, [pc, #164]	; (4014d4 <__register_exitproc+0xbc>)
  40142e:	681c      	ldr	r4, [r3, #0]
  401430:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401434:	2b00      	cmp	r3, #0
  401436:	d03e      	beq.n	4014b6 <__register_exitproc+0x9e>
  401438:	685a      	ldr	r2, [r3, #4]
  40143a:	2a1f      	cmp	r2, #31
  40143c:	dc1c      	bgt.n	401478 <__register_exitproc+0x60>
  40143e:	f102 0e01 	add.w	lr, r2, #1
  401442:	b176      	cbz	r6, 401462 <__register_exitproc+0x4a>
  401444:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401448:	2401      	movs	r4, #1
  40144a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40144e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401452:	4094      	lsls	r4, r2
  401454:	4320      	orrs	r0, r4
  401456:	2e02      	cmp	r6, #2
  401458:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40145c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401460:	d023      	beq.n	4014aa <__register_exitproc+0x92>
  401462:	3202      	adds	r2, #2
  401464:	f8c3 e004 	str.w	lr, [r3, #4]
  401468:	6828      	ldr	r0, [r5, #0]
  40146a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40146e:	f7ff ffd1 	bl	401414 <__retarget_lock_release_recursive>
  401472:	2000      	movs	r0, #0
  401474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401478:	4b17      	ldr	r3, [pc, #92]	; (4014d8 <__register_exitproc+0xc0>)
  40147a:	b30b      	cbz	r3, 4014c0 <__register_exitproc+0xa8>
  40147c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401480:	f3af 8000 	nop.w
  401484:	4603      	mov	r3, r0
  401486:	b1d8      	cbz	r0, 4014c0 <__register_exitproc+0xa8>
  401488:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40148c:	6002      	str	r2, [r0, #0]
  40148e:	2100      	movs	r1, #0
  401490:	6041      	str	r1, [r0, #4]
  401492:	460a      	mov	r2, r1
  401494:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401498:	f04f 0e01 	mov.w	lr, #1
  40149c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4014a0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4014a4:	2e00      	cmp	r6, #0
  4014a6:	d0dc      	beq.n	401462 <__register_exitproc+0x4a>
  4014a8:	e7cc      	b.n	401444 <__register_exitproc+0x2c>
  4014aa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4014ae:	430c      	orrs	r4, r1
  4014b0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4014b4:	e7d5      	b.n	401462 <__register_exitproc+0x4a>
  4014b6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4014ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4014be:	e7bb      	b.n	401438 <__register_exitproc+0x20>
  4014c0:	6828      	ldr	r0, [r5, #0]
  4014c2:	f7ff ffa7 	bl	401414 <__retarget_lock_release_recursive>
  4014c6:	f04f 30ff 	mov.w	r0, #4294967295
  4014ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4014ce:	bf00      	nop
  4014d0:	20400438 	.word	0x20400438
  4014d4:	004014dc 	.word	0x004014dc
  4014d8:	00000000 	.word	0x00000000

004014dc <_global_impure_ptr>:
  4014dc:	20400010                                ..@ 

004014e0 <_init>:
  4014e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014e2:	bf00      	nop
  4014e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4014e6:	bc08      	pop	{r3}
  4014e8:	469e      	mov	lr, r3
  4014ea:	4770      	bx	lr

004014ec <__init_array_start>:
  4014ec:	004013bd 	.word	0x004013bd

004014f0 <__frame_dummy_init_array_entry>:
  4014f0:	00400165                                e.@.

004014f4 <_fini>:
  4014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014f6:	bf00      	nop
  4014f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4014fa:	bc08      	pop	{r3}
  4014fc:	469e      	mov	lr, r3
  4014fe:	4770      	bx	lr

00401500 <__fini_array_start>:
  401500:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <impure_data>:
20400010:	0000 0000 02fc 2040 0364 2040 03cc 2040     ......@ d.@ ..@ 
	...
204000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400438 <__atexit_recursive_mutex>:
20400438:	06d8 2040                                   ..@ 
